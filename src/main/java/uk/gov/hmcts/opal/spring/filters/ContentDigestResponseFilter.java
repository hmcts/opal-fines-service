package uk.gov.hmcts.opal.spring.filters;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.Locale;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.ContentCachingResponseWrapper;
import uk.gov.hmcts.opal.spring.properties.ContentDigestProperties;

@Slf4j
@Component
@Order(Ordered.LOWEST_PRECEDENCE - 10)
@RequiredArgsConstructor
public class ContentDigestResponseFilter extends OncePerRequestFilter {

    private final ContentDigestProperties contentDigestProperties;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
        throws ServletException, IOException {

        ContentDigestProperties.Response contentDigestResponseProperties = contentDigestProperties.getResponse();
        if (!contentDigestResponseProperties.isAutoGenerated()) {
            chain.doFilter(request, response);
            return;
        }

        ContentCachingResponseWrapper wrapped = new ContentCachingResponseWrapper(response);

        try {
            chain.doFilter(request, wrapped);

            byte[] body = wrapped.getContentAsByteArray();
            if (body.length == 0) {
                return;
            }

            String jcaAlgo = contentDigestResponseProperties.getAlgorithm();
            String rfcToken = jcaAlgo.toLowerCase(Locale.ROOT);

            try {
                MessageDigest md = MessageDigest.getInstance(jcaAlgo);
                byte[] digest = md.digest(body);
                String sfBinary = ":" + Base64.getEncoder().encodeToString(digest) + ":";
                wrapped.setHeader("Content-Digest", rfcToken + "=" + sfBinary);
                log.debug("Added Content-Digest: {}={}", rfcToken, sfBinary);
            } catch (Exception ex) {
                log.error("Failed to compute Content-Digest with {}", jcaAlgo, ex);
            }
        } finally {
            wrapped.copyBodyToResponse();
        }
    }
}
