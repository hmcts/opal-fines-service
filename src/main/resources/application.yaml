server:
  port: 4550

management:
  health:
    redis:
      enabled: ${opal.redis.enabled:false}
  endpoint:
    health:
      show-details: "always"

  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

springdoc:
  packagesToScan: uk.gov.hmcts.opal.controllers,uk.gov.hmcts.opal.authentication.controller
  writer-with-order-by-keys: true

spring:
  config:
    import: "optional:configtree:/mnt/secrets/opal/"
  application:
    name: Opal Fines Service
  jackson:
    serialization:
      write_dates_as_timestamps: false
  security:
    oauth2:
      client:
        registration:
          internal-azure-ad:
            client-id: ${AAD_CLIENT_ID:00000000-0000-0000-0000-000000000000}
            client-secret: ${AAD_CLIENT_SECRET:}
            scope: api://${AAD_CLIENT_ID:00000000-0000-0000-0000-000000000000}/opalinternaluser
            redirect-uri: ${opal.frontend.url}/sso/login-callback
            logout-redirect-uri: ${opal.frontend.url}/sso/logout-callback
            authorization-grant-type: authorization_code
            response-type: code
            response-mode: form_post
            prompt: login
            issuer-uri: https://sts.windows.net/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/
            claims: preferred_username
            provider: internal-azure-ad-provider
        provider:
          internal-azure-ad-provider:
            authorization-uri: ${opal.azure.active-directory-justice-auth-uri}/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/oauth2/v2.0/authorize
            token-uri: ${opal.azure.active-directory-justice-auth-uri}/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/oauth2/v2.0/token
            jwk-set-uri: ${opal.azure.active-directory-justice-auth-uri}/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/discovery/v2.0/keys
            logout-uri: ${opal.azure.active-directory-justice-auth-uri}/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/oauth2/v2.0/logout
            reset-password-uri: ${opal.azure.active-directory-justice-auth-uri}/${AAD_TENANT_ID:00000000-0000-0000-0000-000000000000}/oauth2/v2.0/authorize

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${OPAL_FINES_DB_HOST:localhost}:${OPAL_FINES_DB_PORT:5432}/${OPAL_FINES_DB_NAME:opal-fines-db}${OPAL_FINES_DB_OPTIONS:}
    username: ${OPAL_FINES_DB_USERNAME:opal-fines}
    password: ${OPAL_FINES_DB_PASSWORD:opal-fines}
    properties:
      charSet: UTF-8
    hikari:
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 10000
      poolName: OpalHikariCP
      maxLifetime: 7200000
      connectionTimeout: 30000
      auto-commit: false
      leak-detection-threshold: 1000
  jpa:
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        # If 'spring.jpa.show-sql' above is 'true' or 'logging.level.org.hibernate.SQL' below is 'DEBUG',
        # then this option formats the sql in the console or logs (respectively) for easier human parsing.
        format_sql: true
        generate_statistics: false
        log_slow_query: 9
        dialect: org.hibernate.dialect.PostgreSQLDialect
        connection:
          # Following setting is 'generally' suggested to be false, or a lot of work otherwise
          provider_disables_autocommit: false
          # The following mode is advised against? Used only with a JTA Datasource.
          # handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT
        jdbc:
          lob:
            # silence the 'wall-of-text' - unnecessary exception throw about blob types
            non_contextual_creation: true
  data:
    redis:
      host: ${OPAL_REDIS_HOST:localhost}
      port: ${OPAL_REDIS_PORT:6379}
  flyway:
    locations: ${FLYWAY_LOCATIONS:classpath:db/migration/allEnvs, classpath:db/migration/devOnly, classpath:db/migration/stgOnly}
    baseline-on-migrate: true
    ignoreMigrationPatterns: "*:missing"


dbMigration:
  # When true, the app will run DB migration on startup.
  # Otherwise, it will just check if all migrations have been applied (and fail to start if not).
  runOnStartup: ${RUN_DB_MIGRATION_ON_STARTUP:true}

azure:
  application-insights:
    instrumentation-key: ${opal.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}

app-mode: ${DEFAULT_APP_MODE:opal}

legacy-gateway:
  url: ${OPAL_LEGACY_GATEWAY_URL:http://localhost:4553/opal}
  username: ${OPAL_LEGACY_GATEWAY_USERNAME:username}
  password: ${OPAL_LEGACY_GATEWAY_PASSWORD:password}

launchdarkly:
  sdk-key: ${LAUNCH_DARKLY_SDK_KEY:}
  offline-mode: ${LAUNCH_DARKLY_OFFLINE_MODE:false}
  env: ${LAUNCH_DARKLY_ENV:default}
  enabled: ${LAUNCH_DARKLY_ENABLED:true}

quartzProperties:
  org.quartz:
    scheduler:
      instanceId: AUTO
    jobStore:
      isClustered: true
      class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
      driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
      dataSource: dataSource
      clusterCheckinInterval: 2000
      misfireThreshold: 60000
    threadPool:
      class: org.quartz.simpl.SimpleThreadPool
      threadCount: 8

opal:
  content-digest:
    request:
      enforce: ${OPAL_CONTENT_DIGEST_ENABLED:true}
      supported-algorithms:
        sha-256: SHA-256
        sha-512: SHA-512
    response:
      auto-generate: ${OPAL_CONTENT_DIGEST_RESPONSE_AUTO_GENERATE:true}
      algorithm: ${OPAL_CONTENT_DIGEST_RESPONSE_ALGORITHM:SHA-256}
  redis:
    enabled: ${OPAL_REDIS_ENABLED:false}
    ttl-hours: ${OPAL_REDIS_TTL_HOURS:8}
  sftp:
    inbound:
      host: ${OPAL_SFTP_INBOUND_HOST:opalsftpstg.blob.core.windows.net}
      port: ${OPAL_SFTP_INBOUND_PORT:22}
      user: ${OPAL_SFTP_INBOUND_USER:-}
      password: ${OPAL_SFTP_INBOUND_PASSWORD:-}
      location: ${OPAL_SFTP_INBOUND_LOCATION:inbound}
      create-sub-locations: ${OPAL_SFTP_INBOUND_CREATE_SUB_LOCATIONS:false}
    outbound:
      host: ${OPAL_SFTP_OUTBOUND_HOST:opalsftpstg.blob.core.windows.net}
      port: ${OPAL_SFTP_OUTBOUND_PORT:22}
      user: ${OPAL_SFTP_OUTBOUND_USER:-}
      password: ${OPAL_SFTP_OUTBOUND_PASSWORD:-}
      location: ${OPAL_SFTP_OUTBOUND_LOCATION:outbound}
      create-sub-locations: ${OPAL_SFTP_OUTBOUND_CREATE_SUB_LOCATIONS:false}
  schedule:
    log-retention-job:
      # This default is once a day, at midnight (Quartz cron, not Linux cron - see org.quartz.CronExpression)
      cron: ${OPAL_LOG_RETENTION_JOB_CRON:0 0 0 * * ?}
    file-handler-job:
      # This default is once a day, at midnight (Quartz cron, not Linux cron - see org.quartz.CronExpression)
      cron: ${OPAL_FILE_HANDLER_JOB_CRON:0 0 0 * * ?}
  frontend:
    url: ${OPAL_FRONTEND_URL:http://localhost:4200}
  azure:
    active-directory-justice-auth-uri: https://login.microsoftonline.com
  testing-support-endpoints:
    enabled: ${TESTING_SUPPORT_ENDPOINTS_ENABLED:true}
  test-user:
    email: ${OPAL_TEST_USER_EMAIL:opal-test@HMCTS.NET}
    password: ${OPAL_TEST_USER_PASSWORD}

be-developer-config:
  user-role-permissions: ${BE_DEV_ROLE_PERMISSIONS:}

printservice:
  maxRetries: 3
  pageSize: 100

logging:
  level:
    opal: ${OPAL_LOG_LEVEL:INFO}
    org:
      hibernate:
        stat: INFO
        SQL: INFO
        SQL_SLOW: INFO
        type:
          descriptor:
            sql:
              BasicBinder: WARN

user:
  service:
    url: ${OPAL_USER_SERVICE_API_URL:http://localhost:4555}
