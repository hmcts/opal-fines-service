import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript {
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:11.11.2")
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.5'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.3.0.5676'
  id 'uk.gov.hmcts.java' version '0.12.67'
  id 'org.flywaydb.flyway' version '11.11.2'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.34'
}
//Should we fail fast on test failures?

//Defaults to true if env is not present
var failFast = System.getenv('FAIL_FAST') == null || System.getenv('FAIL_FAST').toBoolean()

group = 'uk.gov.hmcts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

// (Temp?) Fix to solve the issue:
// Toolchain from `executable` property does not match toolchain from `javaLauncher` property.
gradle.taskGraph.whenReady { taskGraph ->
  def task = taskGraph.allTasks.find { it.name.endsWith(".main()") }
  if (task instanceof JavaExec) {
    task.executable = task.javaLauncher.get().executablePath.asFile.absolutePath
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked"
//  Enable the following to highlight all deprecated build errors
  options.compilerArgs << "-Xlint:deprecation"
//  Enable the following to stop the build on any warning messages (not just error messages)
  options.compilerArgs << "-Werror"
//  Change the maximum number of reported compiler errors (default 100)
  options.compilerArgs.addAll("-Xmaxerrs", "200")
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
  if (failFast) {
    failFast = true
  }
}


tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.register('functionalOpal', Test) {

  description = "Runs functional tests against Opal mode"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  outputs.upToDateWhen { false }
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/functional/opal"))
  testLogging.showStandardStreams = true
  gradle.startParameter.continueOnFailure = true
  environment("DEFAULT_APP_MODE", "opal")
  include '**/OpalTestRunner.class'

}
tasks.register('functionalLegacy', Test) {
  description = "Runs functional tests against Legacy mode"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  outputs.upToDateWhen { false }
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/functional/legacy"))
  gradle.startParameter.continueOnFailure = true
  testLogging.showStandardStreams = true
  environment("DEFAULT_APP_MODE", "legacy")

  include '**/LegacyTestRunner.class'
}
tasks.register('copyFunctionalReport', Copy) {
  from("${rootDir}/target/site/serenity")
  into("${rootDir}/functional-test-report")
  logger.quiet("Functional Test Report available at - file://${rootDir}/functional-test-report/index.html")
}
tasks.register('mergeFunctionalResults', Copy) {
  from layout.buildDirectory.dir("test-results/functional/opal")
  from layout.buildDirectory.dir("test-results/functional/legacy")
  into layout.buildDirectory.dir("test-results/functional")
  include '*.xml'
}
tasks.register('generateTestSummary', JavaExec) {
  group = "Reporting"
  description = "Generate an HTML summary from test result XMLs"
  classpath = sourceSets.functionalTest.runtimeClasspath
  mainClass = 'uk.gov.hmcts.opal.scripts.TestReportSummaryGenerator'
}

tasks.register('functional') {
  description = "Runs functional tests"
  group = "Verification"
  gradle.startParameter.continueOnFailure = true
  dependsOn('clearReports', 'functionalOpal', 'functionalLegacy', 'aggregate', 'copyFunctionalReport', 'mergeFunctionalResults', 'generateTestSummary')
  tasks.functionalOpal.mustRunAfter clearReports
  tasks.functionalLegacy.mustRunAfter functionalOpal
  tasks.mergeFunctionalResults.mustRunAfter functionalLegacy
  tasks.aggregate.mustRunAfter functionalLegacy
  tasks.copyFunctionalReport.mustRunAfter aggregate
  tasks.generateTestSummary.mustRunAfter copyFunctionalReport

}
tasks.register('smokeOpal', Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/smoke"))
  testLogging.showStandardStreams = true
  gradle.startParameter.continueOnFailure = true

  include '**/SmokeTestRunner.class'

}
tasks.register('copySmokeReport', Copy) {
  from("${rootDir}/target/site/serenity")
  into("${rootDir}/smoke-test-report")
  logger.quiet("Smoke Test Report available at - file://${rootDir}/smoke-test-report/index.html")
}

tasks.register('smoke') {
  description = "Runs Smoke Tests"
  group = "Verification"
  gradle.startParameter.continueOnFailure = true
  dependsOn('clearReports', 'smokeOpal', 'aggregate', 'copySmokeReport')
  tasks.smokeOpal.mustRunAfter clearReports
  tasks.aggregate.mustRunAfter smokeOpal
  tasks.copySmokeReport.mustRunAfter aggregate

}

def coverageExclusions = [
    '**/uk/gov/hmcts/opal/**/model/**',
    '**/uk/gov/hmcts/opal/**/config/**',
    '**/uk/gov/hmcts/opal/authentication/client/**',
    '**/uk/gov/hmcts/opal/**/exception/**'
]

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    html.required = true
    csv.required = false
    html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: jacocoExclusionArray(coverageExclusions)
      )
    }))
  }
}

static String[] jacocoExclusionArray(ArrayList<String> exclusions) {
  final def lst = new ArrayList<String>()

  exclusions.stream().forEach { it.endsWith(".java") ? lst.add(it.replace(".java", ".class")) : lst.add(it) }

  return lst.toArray()
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

jacocoTestReport.dependsOn check
jacocoTestCoverageVerification.dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "HMCTS :: opal-fines-service"
    property "sonar.projectKey", "uk.gov.hmcts:opal-fines-service"
    property "sonar.gradle.skipCompile", "true"
    property "sonar.exclusions", coverageExclusions.join(', ')
    property 'sonar.coverage.exclusions', "**/entity/*,**/model/*,**/exception/*,**/config/**,**/repository/jpa/*,**/opal/dto/*"
    property 'sonar.cpd.exclusions', "**/entity/*"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2025.0.0'
  }

  imports {
    mavenBom "org.springframework.integration:spring-integration-bom:6.5.1"
  }

  dependencies {
    dependency group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

ext {
  log4JVersion = "2.25.1"
  serenityVersion = "4.2.34"
}

ext['snakeyaml.version'] = '2.0'
ext['jackson.version'] = '2.19.1'
ext['tomcat.version'] = '10.1.42'

dependencies {
  implementation 'com.microsoft.azure:applicationinsights-spring-boot-starter:2.6.4'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  implementation 'org.springframework.boot:spring-boot-starter-cache'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-integration'
  implementation group: 'org.springframework.integration', name: 'spring-integration-sftp'
  implementation group: 'org.springframework.integration', name: 'spring-integration-file'


  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-authorization-server', version: '1.5.2'

  implementation group: 'org.springframework', name: 'spring-aspects'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.11'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.10.1'

  implementation(group: 'com.networknt', name: 'json-schema-validator', version: '1.5.8');
  implementation(group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0');


  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation 'org.flywaydb:flyway-core'
  runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.11.2'
  implementation 'org.postgresql:postgresql'

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
  compileOnly 'org.projectlombok:lombok:1.18.38'
  annotationProcessor 'org.projectlombok:lombok:1.18.38'
  annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.6.27.Final'

  // MapStruct
  implementation 'org.mapstruct:mapstruct:1.6.3'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

  testCompileOnly 'org.projectlombok:lombok:1.18.38'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

  integrationTestCompileOnly 'org.projectlombok:lombok:1.18.38'
  integrationTestAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

  implementation 'org.mapstruct:mapstruct:1.6.3'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

  implementation group: 'org.apache.xmlgraphics', name: 'fop', version: '2.11'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-core', version: '2.11'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-events', version: '2.11'
  implementation group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.11'
  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '3.0.5'
  implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.8'

  testImplementation 'com.github.java-json-tools:json-schema-validator:2.2.14'
  testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

  testImplementation 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
  testImplementation 'org.testcontainers:postgresql'
  testImplementation(platform('org.junit:junit-bom:5.13.4'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.junit.platform:junit-platform-suite:1.13.4'
  testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.23.0'

  testImplementation "net.serenity-bdd:serenity-core:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-rest-assured:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-report-resources:${serenityVersion}"

  testImplementation "net.serenity-bdd:serenity-cucumber:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-ensure:${serenityVersion}"

  //Added to override dependency version to resolve vulnerability
  implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.10'
  implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.10'
  implementation 'org.apache.tomcat.embed:tomcat-embed-el:11.0.10'
  implementation 'org.apache.tomcat:tomcat-annotations-api:11.0.10'
  implementation 'org.apache.commons:commons-lang3:3.18.0'
  implementation 'commons-fileupload:commons-fileupload:1.6.0'

}

application {
  mainClass.set('uk.gov.hmcts.opal.Application')
}

bootJar {
  archiveFileName = "opal-fines-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

tasks.register('migratePostgresDatabase', FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
  println "Flyway jbdc property 'url' (derived from System property 'FLYWAY_URL'?) is: ${url}"
}

tasks.register('runAllStyleChecks') {
  dependsOn 'checkstyleMain'
  dependsOn 'checkstyleTest'
  dependsOn 'checkstyleIntegrationTest'
  dependsOn 'checkstyleFunctionalTest'
}
