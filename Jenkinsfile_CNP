#!groovy
import uk.gov.hmcts.contino.GithubAPI

properties([
    parameters([
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip sonar'),
    ])
])
@Library("Infrastructure")

def type = "java"
def product = "opal"
def component = "fines-service"
def githubApi = new GithubAPI(this)

def determineDevEnvironmentDeployment() {
  env.DEV_ENABLE_OPAL_FRONT_END = false
  env.DEV_OPAL_FRONT_END_URL = "https://opal-frontend.staging.platform.hmcts.net"
  env.DEV_OPAL_FRONT_END_IMAGE_SUFFIX = "latest"

  env.DEV_ENABLE_OPAL_USER_SERVICE = false
  env.DEV_OPAL_USER_SERVICE_URL = "https://opal-user-service.staging.platform.hmcts.net"
  env.DEV_OPAL_USER_SERVICE_IMAGE_SUFFIX = "latest"


  env.APP_MODE = "opal"

  if (githubApi.checkForLabel(env.BRANCH_NAME, "app_mode_legacy")) {
    env.APP_MODE = "legacy"
  }

  if (githubApi.checkForLabel(env.BRANCH_NAME, "enable_keep_helm")) {
    for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable_opal_")) {

      //Portal
      if (label ==~ /enable_opal_front_end.*/) {
        env.DEV_ENABLE_OPAL_FRONT_END = true
        env.DEV_OPAL_FRONT_END_URL = "https://opal-fines-service-pr-${env.CHANGE_ID}-frontend.dev.platform.hmcts.net"

        if (label ==~ /enable_opal_front_end:pr-.*/) {
          env.DEV_OPAL_FRONT_END_IMAGE_SUFFIX = label.replace("enable_opal_front_end:", "")
        }
        echo "Deploying Opal Front end (${env.DEV_OPAL_FRONT_END_URL} - ${env.DEV_OPAL_FRONT_END_IMAGE_SUFFIX}) instance in PR environment"
      }

      //User service
      if (label ==~ /enable_opal_user_service.*/) {
        env.DEV_ENABLE_OPAL_USER_SERVICE = true
        env.DEV_OPAL_USER_SERVICE_URL = "https://opal-fines-service-pr-${env.CHANGE_ID}-user-service.dev.platform.hmcts.net"
        if (label ==~ /enable_opal_user_service:pr-.*/) {
          env.DEV_OPAL_USER_SERVICE_IMAGE_SUFFIX = label.replace("enable_opal_user_service:", "")
        }
        echo "Deploying Opal User service (${env.DEV_OPAL_USER_SERVICE_URL} - ${env.DEV_OPAL_USER_SERVICE_IMAGE_SUFFIX}) instance in PR environment"
      }
    }
  }
}

withPipeline(type, product, component) {
  env.FAIL_FAST = true
  env.SKIP_SONAR = params.SKIP_SONAR ?: false
  env.STAGING_DB_SCHEMA = 'public'
  env.OPAL_LEGACY_GATEWAY_URL = 'https://opal-legacy-db-stub.staging.platform.hmcts.net'
//  enableSlackNotifications('#opal-fines-builds')


  if (githubApi.checkForLabel(env.BRANCH_NAME, "SKIP_SONAR")) {
    env.SKIP_SONAR = true
  }
  before('akschartsinstall') {
    onPR {
      determineDevEnvironmentDeployment()
    }
  }
  afterAlways('akschartsinstall') {
    //Temp disable
    if (false && env.SKIP_SONAR) {
      stage('SKIP_SONAR IS TRUE') {
        error("Build can not fully complete when SKIP_SONAR is set to true")
      }
    }
  }

  afterAlways('test') {
    steps.junit '**/test-results/integration/*.xml'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/test-results/integration/*.xml'

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "main.html",
        reportName           : "Checkstyle Main Report"
    ]

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "test.html",
        reportName           : "Checkstyle Test Report"
    ]

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "functionalTest.html",
        reportName           : "Checkstyle Functional Test Report"
    ]

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/checkstyle",
        reportFiles          : "integrationTest.html",
        reportName           : "Checkstyle Integration Test Report"
    ]

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/test",
        reportFiles          : "index.html",
        reportName           : "Unit Tests Report"
    ]

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/integration",
        reportFiles          : "index.html",
        reportName           : "Integration Tests Report"
    ]
  }

  afterAlways('functionalTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-test-report/",
        reportFiles          : "index.html",
        reportName           : "Serenity Functional Test Report"
    ]
    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-test-report/htmlReport/",
        reportFiles          : "test-summary.html",
        reportName           : "Test Summary Report"
    ]
  }

  afterAlways('smoketest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "smoke-test-report/",
        reportFiles          : "index.html",
        reportName           : "Serenity Smoke Test Report"
    ]
  }

  afterAlways('functionalTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-test-report/",
        reportFiles          : "index.html",
        reportName           : "Serenity Functional Test Report"
    ]
    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-test-report/htmlReport/",
        reportFiles          : "test-summary.html",
        reportName           : "Test Summary Report"
    ]
  }
  afterAlways('smoketest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'

    publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "smoke-test-report/",
        reportFiles          : "index.html",
        reportName           : "Serenity Smoke Test Report"
    ]
  }
}
