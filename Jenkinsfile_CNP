#!groovy

@Library("Infrastructure")

def type = "java"
def product = "opal"
def component = "fines-service"

withPipeline(type, product, component) {
  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/integration/*.xml'
  }

  afterAlways('functionalTest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-test-report/",
      reportFiles          : "index.html",
      reportName           : "Serenity Functional Test Report"
    ]
  }

  afterAlways('smoketest:dev') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "smoke-test-report/",
      reportFiles          : "index.html",
      reportName           : "Serenity Smoke Test Report"
    ]
  }

  afterAlways('functionalTest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-test-report/**/*'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-test-report/",
      reportFiles          : "index.html",
      reportName           : "Serenity Functional Test Report"
    ]

  }
  afterAlways('smoketest:stg') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-test-report/**/*'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "smoke-test-report/",
      reportFiles          : "index.html",
      reportName           : "Serenity Smoke Test Report"
    ]
  }
}
